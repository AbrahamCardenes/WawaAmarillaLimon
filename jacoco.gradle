if (!rootProject.ext.sonar.ignoreModules.contains(name)) {
    apply plugin: "jacoco"
    apply plugin: "org.sonarqube"

    def sources = "src/main/java"
    def testTask = "testDebugUnitTest"

    if (hasProperty("android")) {
        android {
            buildTypes {
                debug {
                    testCoverageEnabled = true
                    enableUnitTestCoverage = true
                    enableAndroidTestCoverage true
                }
            }
        }
    }

    afterEvaluate {
        tasks.withType(Test).configureEach {
            jacoco.includeNoLocationClasses = true
            jacoco.excludes = [
                    "jdk.internal.*",
                    "androidx.core.*",
                    "com.android.*",
                    "android.*",
                    "*/core"
            ]
        }

        def jacocoResults = "${buildDir}/JacocoReports/jacocoTestReport/jacocoTestReport.xml"

        tasks.register("testCoverage", JacocoReport) {
            dependsOn testTask

            reports {
                xml.required.set(true)
                xml.outputLocation.set(file(jacocoResults))
                html.required.set(true)
            }

            executionData.setFrom(fileTree(dir: buildDir, includes: [
                    "outputs/unit_test_code_coverage/debugUnitTest/testDebugUnitTest.exec"
            ]))

            sourceDirectories.setFrom(files([
                    sources
            ]))

            classDirectories.setFrom(files([
                    fileTree(
                            dir: "${buildDir}/tmp/kotlin-classes/debug",
                            excludes: rootProject.ext.sonar.excludeFilter
                    )
            ]))
        }
    }

    sonar {
        properties {
            property "sonar.junit.reportPaths", "${buildDir}/test-results/${testTask}"
            property "sonar.coverage.jacoco.xmlReportPaths", "${buildDir}/JacocoReports/jacocoTestReport/jacocoTestReport.xml"
            property "sonar.sources", sources
        }
    }
}
